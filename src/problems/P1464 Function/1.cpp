/*

题目描述
对于一个递归函数w(a,b,c)w(a,b,c)
如果a \le 0a≤0 or b \le 0b≤0 or c \le 0c≤0就返回值11.
如果a>20a>20 or b>20b>20 or c>20c>20就返回w(20,20,20)w(20,20,20)
如果a<ba<b并且b<cb<c 就返回w(a,b,c-1)+w(a,b-1,c-1)-w(a,b-1,c)w(a,b,c−1)+w(a,b−1,c−1)−w(a,b−1,c)
其它的情况就返回w(a-1,b,c)+w(a-1,b-1,c)+w(a-1,b,c-1)-w(a-1,b-1,c-1)w(a−1,b,c)+w(a−1,b−1,c)+w(a−1,b,c−1)−w(a−1,b−1,c−1)
这是个简单的递归函数，但实现起来可能会有些问题。当a,b,ca,b,c均为15时，调用的次数将非常的多。你要想个办法才行.

 absi2011 : 比如 w(30,-1,0)w(30,−1,0)既满足条件1又满足条件2

这种时候我们就按最上面的条件来算

所以答案为1



输入输出格式
输入格式：
会有若干行。

并以-1,-1,-1−1,−1,−1结束。

保证输入的数在[-9223372036854775808,9223372036854775807][−9223372036854775808,9223372036854775807]之间，并且是整数。

输出格式：
输出若干行，每一行格式：

w(a, b, c) = ans

注意空格。

输入输出样例
输入样例#1： 
1 1 1
2 2 2
-1 -1 -1
输出样例#1： 
w(1, 1, 1) = 2
w(2, 2, 2) = 4
说明
记忆化搜索


重点！！！！
    边界！！！千万不要数组越界

*/
#include <iostream>
#include <memory.h>
using namespace std;

long long f[21][21][21];

long long w(int a, int b, int c) {
    if (a <= 0 || b <= 0 || c <= 0) 
        return 1;
    if (a > 20 || b > 20 || c > 20)
        return w(20, 20, 20);   // 一定要放在边界 0 的判断之后，越界就麻烦了，c++ 不报数组越界
    if (f[a][b][c] != 0)
        return f[a][b][c];
    if (a < b && b < c)
        f[a][b][c] = w(a, b, c - 1)
                + w(a, b - 1, c - 1)
                - w(a, b - 1, c);
    else 
        f[a][b][c] = w(a - 1, b, c)
                    + w(a - 1, b - 1, c)
                    + w(a - 1, b, c - 1)
                    - w(a - 1, b - 1, c - 1);
    return f[a][b][c];
}


int main() {
    int a, b, c;
    cin >> a >> b >> c;
    while (a != -1 || b != -1 || c != -1) {
        cout << "w(" << a << ", " << b << ", " << c << ") = " << w(a, b, c) << endl;
        cin >> a >> b >> c;
    }
    return 0;
}