/*

题目描述
在初赛普及组的“阅读程序写结果”的问题中，我们曾给出一个字符串展开的例子：如果在输入的字符串中，含有类似于“d-h”或者“4-8”的字串，我们就把它当作一种简写，输出时，用连续递增的字母或数字串替代其中的减号，即，将上面两个子串分别输出为“defgh”和“45678"。在本题中，我们通过增加一些参数的设置，使字符串的展开更为灵活。具体约定如下：

(1) 遇到下面的情况需要做字符串的展开：在输入的字符串中，出现了减号“-”，减号两侧同为小写字母或同为数字，且按照ASCII码的顺序，减号右边的字符严格大于左边的字符。

(2) 参数p_1p 
1
​	 ：展开方式。p_1=1p 
1
​	 =1时，对于字母子串，填充小写字母；p_1=2p 
1
​	 =2时，对于字母子串，填充大写字母。这两种情况下数字子串的填充方式相同。p_1=3p 
1
​	 =3时，不论是字母子串还是数字字串，都用与要填充的字母个数相同的星号“*”来填充。

(3) 参数p_2p 
2
​	 ：填充字符的重复个数。p_2=kp 
2
​	 =k表示同一个字符要连续填充k个。例如，当p_2=3p 
2
​	 =3时，子串“d-h”应扩展为“deeefffgggh”。减号两边的字符不变。

(4) 参数p_3p 
3
​	 ：是否改为逆序：p3=1p3=1表示维持原来顺序，p_3=2p 
3
​	 =2表示采用逆序输出，注意这时候仍然不包括减号两端的字符。例如当p_1=1p 
1
​	 =1、p_2=2p 
2
​	 =2、p_3=2p 
3
​	 =2时，子串“d-h”应扩展为“dggffeeh”。

(5) 如果减号右边的字符恰好是左边字符的后继，只删除中间的减号，例如：“d-e”应输出为“de”，“3-4”应输出为“34”。如果减号右边的字符按照ASCII码的顺序小于或等于左边字符，输出时，要保留中间的减号，例如：“d-d”应输出为“d-d”，“3-1”应输出为“3-1”。

输入输出格式
输入格式：
共两行。

第11行为用空格隔开的33个正整数，依次表示参数p_1,p_2,p_3p 
1
​	 ,p 
2
​	 ,p 
3
​	 。

第22行为一行字符串，仅由数字、小写字母和减号“-−”组成。行首和行末均无空格。

输出格式：
共一行，为展开后的字符串。

输入输出样例
输入样例#1： 
1 2 1
abcs-w1234-9s-4zz

输出样例#1： 
abcsttuuvvw1234556677889s-4zz

输入样例#2： 
2 3 2
a-d-d
输出样例#2： 
aCCCBBBd-d


思路:
    1. 只有 s[i] == '-' && s[i - 1] 和 s[i + 1] 都为数字或者字母并且后者的 Ascii 码要大于前者
    2. p1 条件的处理 
        if (p1 == 3) 
            temp += '*';
        else if (p1 == 2 && isAlphabte(j)) 
            temp += j -32;
        else 
            temp += j;

*/
#include <iostream>

using namespace std;

bool check(string &str, int x, int y) {
    return (str[x] < str[y] && 
            (('0' <= str[x] && str[y] <= '9') || ('a' <= str[x] && str[y] <= 'z')));
}

int main() {
    int p1, p2, p3;
    cin >> p1 >> p2 >> p3;
    bool fill = false;
    string str;
    cin >> str;
    string res;
    int k = p2, len = (int)str.size();
    for (int i = 0; i < len; i++) {
        if (0 < i && i + 1 < len && str[i] == '-' && check(str, i - 1, i + 1)) {
            int begin = i - 1, end = i + 1;
            string temp = "";
            if (p3 == 2) swap(begin, end);
            // cout << begin << ' ' << end << endl;
            int step = (p3 == 2 ? -1 : 1);
            for (char j = str[begin] + step; j != str[end]; j += step) {
                for (int t = 0; t < k; t++) {
                    temp += p1 == 3 ? '*' : (p1 == 2 && 'a' <= j && j <= 'z' ? j - 32 : j);
                }
            }
            // cout << "temp: " << temp << endl;
            res += temp;                                                
        } else {
            res += str[i];
        }
    }
    cout << res;
    return 0;
}